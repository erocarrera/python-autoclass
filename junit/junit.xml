<?xml version="1.0" encoding="utf-8"?><testsuite errors="0" failures="4" name="pytest" skips="1" tests="53" time="1.547"><testcase classname="autoclass.tests.test_autoargs" file="autoclass/tests/test_autoargs.py" line="4" name="test_autoargs_simple" time="0.0027577877044677734"></testcase><testcase classname="autoclass.tests.test_autoargs" file="autoclass/tests/test_autoargs.py" line="21" name="test_autoargs_signature_preserving" time="0.0027773380279541016"></testcase><testcase classname="autoclass.tests.test_autoargs" file="autoclass/tests/test_autoargs.py" line="35" name="test_autoargs_varargs" time="0.0025148391723632812"></testcase><testcase classname="autoclass.tests.test_autoargs" file="autoclass/tests/test_autoargs.py" line="57" name="test_autoargs_varargs_kwvarargs" time="0.0021479129791259766"></testcase><testcase classname="autoclass.tests.test_autoargs" file="autoclass/tests/test_autoargs.py" line="83" name="test_autoargs_noarg" time="0.0033843517303466797"></testcase><testcase classname="autoclass.tests.test_autoargs" file="autoclass/tests/test_autoargs.py" line="100" name="test_autoargs_include" time="0.003204345703125"></testcase><testcase classname="autoclass.tests.test_autoargs" file="autoclass/tests/test_autoargs.py" line="120" name="test_autoargs_exclude" time="0.002098560333251953"></testcase><testcase classname="autoclass.tests.test_autoargs" file="autoclass/tests/test_autoargs.py" line="142" name="test_autoargs_include_exclude" time="0.0014624595642089844"></testcase><testcase classname="autoclass.tests.test_autoargs" file="autoclass/tests/test_autoargs.py" line="151" name="test_autoargs_include_exclude_typos" time="0.0016622543334960938"></testcase><testcase classname="autoclass.tests.test_autoargs" file="autoclass/tests/test_autoargs.py" line="179" name="test_autoargs_no_double_set_default" time="0.0023441314697265625"></testcase><testcase classname="autoclass.tests.test_autoclass" file="autoclass/tests/test_autoclass.py" line="7" name="test_autoclass_enforce_validate_not_reversed" time="0.022472143173217773"><system-out>Set surface to 12
</system-out></testcase><testcase classname="autoclass.tests.test_autoclass" file="autoclass/tests/test_autoclass.py" line="30" name="test_autoclass_enforce_validate_reversed" time="0.003340482711791992"></testcase><testcase classname="autoclass.tests.test_autoclass" file="autoclass/tests/test_autoclass.py" line="54" name="test_readme_pytypes" time="0.04236721992492676"></testcase><testcase classname="autoclass.tests.test_autoclass" file="autoclass/tests/test_autoclass.py" line="93" name="test_readme_enforce" time="0.009638071060180664"></testcase><testcase classname="autoclass.tests.test_autoclass" file="autoclass/tests/test_autoclass.py" line="136" name="test_autoclass_inheritance" time="0.0075054168701171875"></testcase><testcase classname="autoclass.tests.test_autodict" file="autoclass/tests/test_autodict.py" line="6" name="test_autodict[only_constructor_args-only_public]" time="0.0047566890716552734"></testcase><testcase classname="autoclass.tests.test_autodict" file="autoclass/tests/test_autodict.py" line="6" name="test_autodict[only_constructor_args-including class-private dunder fields]" time="0.004040718078613281"></testcase><testcase classname="autoclass.tests.test_autodict" file="autoclass/tests/test_autodict.py" line="6" name="test_autodict[all_obj_fields-only_public]" time="0.004536628723144531"></testcase><testcase classname="autoclass.tests.test_autodict" file="autoclass/tests/test_autodict.py" line="6" name="test_autodict[all_obj_fields-including class-private dunder fields]" time="0.0034110546112060547"></testcase><testcase classname="autoclass.tests.test_autohash" file="autoclass/tests/test_autohash.py" line="8" name="test_autohash[only_constructor_args-only_public]" time="0.0031719207763671875"></testcase><testcase classname="autoclass.tests.test_autohash" file="autoclass/tests/test_autohash.py" line="8" name="test_autohash[only_constructor_args-including class-private dunder fields]" time="0.0017228126525878906"></testcase><testcase classname="autoclass.tests.test_autohash" file="autoclass/tests/test_autohash.py" line="8" name="test_autohash[all_obj_fields-only_public]" time="0.002173900604248047"></testcase><testcase classname="autoclass.tests.test_autohash" file="autoclass/tests/test_autohash.py" line="8" name="test_autohash[all_obj_fields-including class-private dunder fields]" time="0.006449460983276367"></testcase><testcase classname="autoclass.tests.test_autohash" file="autoclass/tests/test_autohash.py" line="80" name="test_autohash_exclude" time="0.0056874752044677734"><failure message="TypeError: unhashable type: &apos;dict&apos;">def test_autohash_exclude():
        &quot;&quot;&quot; Tests that exclusion works correctly with autohash &quot;&quot;&quot;
    
        # Currently the test does not work, see https://github.com/smarie/python-autoclass/issues/21
        @autoclass(autohash=False)
        @autohash(exclude=&apos;bar&apos;)
        class Foo:
            def __init__(self, foo: str, bar: Dict[str, str]):
                pass
    
        a = Foo(&apos;hello&apos;, dict())
&gt;       hash(a)

autoclass/tests/test_autohash.py:92: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = Foo({&apos;foo&apos;: &apos;hello&apos;, &apos;bar&apos;: {}})

    def __hash__(self):
        &quot;&quot;&quot;
                        Generated by @autohash.
                        Implements the __hash__ method by hashing the tuple of included/not excluded field values, possibly
                        not including the private fields if `only_public_fields` was set to True
    
                        :param self:
                        :return:
                        &quot;&quot;&quot;
        # note: we prepend a unique hash for the class &gt; NO, it is more intuitive to not do that.
        # to_hash = [type(self)]
        to_hash = []
    
        for att_name, att_value in vars(self).items():
            if _sieve(att_name, include=include, exclude=exclude):
                if not only_public_fields \
                        or (only_public_fields and not att_name.startswith(private_name_prefix)):
                    to_hash.append(att_value)
    
&gt;       return hash(tuple(to_hash))
E       TypeError: unhashable type: &apos;dict&apos;

autoclass/autohash.py:161: TypeError</failure></testcase><testcase classname="autoclass.tests.test_autoprops" file="autoclass/tests/test_autoprops.py" line="8" name="test_autoprops_no_contract" time="0.004179716110229492"></testcase><testcase classname="autoclass.tests.test_autoprops" file="autoclass/tests/test_autoprops.py" line="27" name="test_autoprops_pycontracts" time="0.29219889640808105"></testcase><testcase classname="autoclass.tests.test_autoprops" file="autoclass/tests/test_autoprops.py" line="55" name="test_autoprops_include" time="0.006073474884033203"></testcase><testcase classname="autoclass.tests.test_autoprops" file="autoclass/tests/test_autoprops.py" line="78" name="test_autoprops_exclude" time="0.00583195686340332"></testcase><testcase classname="autoclass.tests.test_autoprops" file="autoclass/tests/test_autoprops.py" line="101" name="test_autoprops_include_exclude" time="0.0016772747039794922"></testcase><testcase classname="autoclass.tests.test_autoprops" file="autoclass/tests/test_autoprops.py" line="111" name="test_autoprops_override" time="0.01099085807800293"><system-out>Property &apos;b&apos; was set to &apos;[&apos;pie&apos;, &apos;pie2&apos;]&apos;
a is being read. Its value is &apos;rhubarb&apos;
Property &apos;b&apos; was set to &apos;[&apos;eh&apos;, &apos;oh&apos;]&apos;
</system-out></testcase><testcase classname="autoclass.tests.test_autoprops" file="autoclass/tests/test_autoprops.py" line="156" name="test_autoprops_override_exceptions" time="0.004028797149658203"></testcase><testcase classname="autoclass.tests.test_autoprops" file="autoclass/tests/test_autoprops.py" line="201" name="test_autoprops_manual" time="0.007473945617675781"></testcase><testcase classname="autoclass.tests.test_autoprops" file="autoclass/tests/test_autoprops.py" line="230" name="test_autoprops_signature_preserving" time="0.003482818603515625"></testcase><testcase classname="autoclass.tests.test_autoprops" file="autoclass/tests/test_autoprops.py" line="252" name="test_autoprops_enforce_validate" time="0.01331019401550293"><system-out>Set surface to 12
Set surface to 0.1
</system-out></testcase><testcase classname="autoclass.tests.test_autoprops" file="autoclass/tests/test_autoprops.py" line="303" name="test_autoprops_enforce_default" time="0.005045413970947266"></testcase><testcase classname="autoclass.tests.test_readme_index" file="autoclass/tests/test_readme_index.py" line="5" name="test_readme_index_basic" time="0.008249521255493164"></testcase><testcase classname="autoclass.tests.test_readme_index" file="autoclass/tests/test_readme_index.py" line="22" name="test_readme_index_basic2" time="0.003043651580810547"></testcase><testcase classname="autoclass.tests.test_readme_index" file="autoclass/tests/test_readme_index.py" line="50" name="test_readme_enforce_simple" time="0.008509159088134766"></testcase><testcase classname="autoclass.tests.test_readme_index" file="autoclass/tests/test_readme_index.py" line="75" name="test_readme_index_pytypes_simple" time="0.014916658401489258"></testcase><testcase classname="autoclass.tests.test_readme_index" file="autoclass/tests/test_readme_index.py" line="98" name="test_readme_index_valid8_simple" time="0.0019030570983886719"><failure message="ImportError: No module named &apos;mini_lambda&apos;">def test_readme_index_valid8_simple():
        &quot;&quot;&quot; Example in the doc with valid8 &quot;&quot;&quot;
    
        from autoclass import autoclass
&gt;       from mini_lambda import s, x, l, Len
E       ImportError: No module named &apos;mini_lambda&apos;

autoclass/tests/test_readme_index.py:103: ImportError</failure></testcase><testcase classname="autoclass.tests.test_readme_index" file="autoclass/tests/test_readme_index.py" line="131" name="test_readme_index_enforce_valid8" time="0.003500699996948242"><failure message="ImportError: No module named &apos;mini_lambda&apos;">def test_readme_index_enforce_valid8():
        &quot;&quot;&quot; Makes sure that the code in the documentation page is correct for the enforce + valid8 example &quot;&quot;&quot;
    
        from autoclass import autoclass
    
        # Imports - for type validation
        from numbers import Integral
        from enforce import runtime_validation, config
        config(dict(mode=&apos;covariant&apos;))  # type validation will accept subclasses too
    
        # Imports - for value validation
&gt;       from mini_lambda import s, x, Len
E       ImportError: No module named &apos;mini_lambda&apos;

autoclass/tests/test_readme_index.py:143: ImportError</failure></testcase><testcase classname="autoclass.tests.test_readme_index" file="autoclass/tests/test_readme_index.py" line="171" name="test_readme_pycontracts_simple" time="0.027745485305786133"></testcase><testcase classname="autoclass.tests.test_readme_index" file="autoclass/tests/test_readme_index.py" line="194" name="test_readme_old_way" time="0.0014865398406982422"></testcase><testcase classname="autoclass.tests.test_readme_index" file="autoclass/tests/test_readme_index.py" line="256" name="test_readme_pycontracts_complex" time="0.03491830825805664"></testcase><testcase classname="autoclass.tests.test_readme_index" file="autoclass/tests/test_readme_index.py" line="291" name="test_readme_pytypes_validate_complex" time="0.0008702278137207031"><skipped message="open bug in pytypes https://github.com/Stewori/pytypes/issues/19" type="pytest.skip">autoclass/tests/test_readme_index.py:291: &lt;py._xmlgen.raw object at 0x7fab06faf4a8&gt;</skipped></testcase><testcase classname="autoclass.tests.test_readme_usage" file="autoclass/tests/test_readme_usage.py" line="6" name="test_readme_usage_autoprops_validate" time="0.0044155120849609375"></testcase><testcase classname="autoclass.tests.test_readme_usage" file="autoclass/tests/test_readme_usage.py" line="25" name="test_readme_usage_autodict_1" time="0.0055468082427978516"></testcase><testcase classname="autoclass.tests.test_readme_usage" file="autoclass/tests/test_readme_usage.py" line="64" name="test_readme_usage_autodict_2" time="0.0030295848846435547"></testcase><testcase classname="autoclass.tests.test_readme_usage" file="autoclass/tests/test_readme_usage.py" line="80" name="test_readme_usage_autodict_3" time="0.003489971160888672"></testcase><testcase classname="autoclass.tests.test_readme_usage" file="autoclass/tests/test_readme_usage.py" line="99" name="test_readme_usage_autohash_1" time="0.0015878677368164062"><failure message="AssertionError: assert -6808364776296456786 == 8157298672284106158
 +  where -6808364776296456786 = hash(&lt;autoclass.tests.test_readme_usage.test_readme_usage_autohash_1.&lt;locals&gt;.A object at 0x7fab06fb8cf8&gt;)
 +  and   8157298672284106158 = hash((1, &apos;r&apos;, 2))">def test_readme_usage_autohash_1():
        @autohash
        class A(object):
            def __init__(self, a: int, b: str):
                self.a = a
                self.b = b
    
        o = A(1, &apos;r&apos;)
        o._test = 2
    
        # o is hashable
&gt;       assert hash(o) == hash((1, &apos;r&apos;, 2))
E       AssertionError: assert -6808364776296456786 == 8157298672284106158
E        +  where -6808364776296456786 = hash(&lt;autoclass.tests.test_readme_usage.test_readme_usage_autohash_1.&lt;locals&gt;.A object at 0x7fab06fb8cf8&gt;)
E        +  and   8157298672284106158 = hash((1, &apos;r&apos;, 2))

autoclass/tests/test_readme_usage.py:111: AssertionError</failure></testcase><testcase classname="autoclass.tests.test_readme_usage" file="autoclass/tests/test_readme_usage.py" line="122" name="test_readme_usage_autohash_2" time="0.0025339126586914062"></testcase><testcase classname="autoclass.tests.test_readme_usage" file="autoclass/tests/test_readme_usage.py" line="142" name="test_readme_usage_autoclass" time="0.012534618377685547"></testcase><testcase classname="autoclass.tests.test_readme_usage" file="autoclass/tests/test_readme_usage.py" line="177" name="test_readme_usage_autoclass_custom" time="0.00836801528930664"></testcase></testsuite>